// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	models "github.com/denisemignoli/restful-api-with-go-and-gin/models"
	mock "github.com/stretchr/testify/mock"
)

// AlbumRepository is an autogenerated mock type for the AlbumRepository type
type AlbumRepository struct {
	mock.Mock
}

type AlbumRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AlbumRepository) EXPECT() *AlbumRepository_Expecter {
	return &AlbumRepository_Expecter{mock: &_m.Mock}
}

// GetAlbumByID provides a mock function with given fields: id
func (_m *AlbumRepository) GetAlbumByID(id int64) (*models.Album, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumByID")
	}

	var r0 *models.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Album, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Album); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlbumRepository_GetAlbumByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbumByID'
type AlbumRepository_GetAlbumByID_Call struct {
	*mock.Call
}

// GetAlbumByID is a helper method to define mock.On call
//   - id int64
func (_e *AlbumRepository_Expecter) GetAlbumByID(id interface{}) *AlbumRepository_GetAlbumByID_Call {
	return &AlbumRepository_GetAlbumByID_Call{Call: _e.mock.On("GetAlbumByID", id)}
}

func (_c *AlbumRepository_GetAlbumByID_Call) Run(run func(id int64)) *AlbumRepository_GetAlbumByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *AlbumRepository_GetAlbumByID_Call) Return(_a0 *models.Album, _a1 error) *AlbumRepository_GetAlbumByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlbumRepository_GetAlbumByID_Call) RunAndReturn(run func(int64) (*models.Album, error)) *AlbumRepository_GetAlbumByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlbums provides a mock function with given fields:
func (_m *AlbumRepository) GetAlbums() []models.Album {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAlbums")
	}

	var r0 []models.Album
	if rf, ok := ret.Get(0).(func() []models.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Album)
		}
	}

	return r0
}

// AlbumRepository_GetAlbums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlbums'
type AlbumRepository_GetAlbums_Call struct {
	*mock.Call
}

// GetAlbums is a helper method to define mock.On call
func (_e *AlbumRepository_Expecter) GetAlbums() *AlbumRepository_GetAlbums_Call {
	return &AlbumRepository_GetAlbums_Call{Call: _e.mock.On("GetAlbums")}
}

func (_c *AlbumRepository_GetAlbums_Call) Run(run func()) *AlbumRepository_GetAlbums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AlbumRepository_GetAlbums_Call) Return(_a0 []models.Album) *AlbumRepository_GetAlbums_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlbumRepository_GetAlbums_Call) RunAndReturn(run func() []models.Album) *AlbumRepository_GetAlbums_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAlbums provides a mock function with given fields: newAlbum
func (_m *AlbumRepository) SaveAlbums(newAlbum models.Album) (int64, error) {
	ret := _m.Called(newAlbum)

	if len(ret) == 0 {
		panic("no return value specified for SaveAlbums")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Album) (int64, error)); ok {
		return rf(newAlbum)
	}
	if rf, ok := ret.Get(0).(func(models.Album) int64); ok {
		r0 = rf(newAlbum)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.Album) error); ok {
		r1 = rf(newAlbum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlbumRepository_SaveAlbums_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAlbums'
type AlbumRepository_SaveAlbums_Call struct {
	*mock.Call
}

// SaveAlbums is a helper method to define mock.On call
//   - newAlbum models.Album
func (_e *AlbumRepository_Expecter) SaveAlbums(newAlbum interface{}) *AlbumRepository_SaveAlbums_Call {
	return &AlbumRepository_SaveAlbums_Call{Call: _e.mock.On("SaveAlbums", newAlbum)}
}

func (_c *AlbumRepository_SaveAlbums_Call) Run(run func(newAlbum models.Album)) *AlbumRepository_SaveAlbums_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Album))
	})
	return _c
}

func (_c *AlbumRepository_SaveAlbums_Call) Return(_a0 int64, _a1 error) *AlbumRepository_SaveAlbums_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlbumRepository_SaveAlbums_Call) RunAndReturn(run func(models.Album) (int64, error)) *AlbumRepository_SaveAlbums_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlbumRepository creates a new instance of AlbumRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumRepository {
	mock := &AlbumRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
